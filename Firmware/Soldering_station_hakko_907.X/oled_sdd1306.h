#ifndef OLED_SDD1306_H

#include "i2c.h"

typedef enum {
    COMMAND,
    DATA
}DATA_TYPE;

//This enum used to print characters
typedef enum {
    A=0,B=1,GAMMA=2,DELTA=3,E=4,Z=5,H=6,THETA=7,I=8,K=9,LAMDA=10,M=11,N=12,KSI=13,O=14,PI=15,P=16,SIGMA=17,T=18,Y=19,FI=20,X=21,PSI=22,OMEGA=23,SPACE=24,COLON=25,CELSIOUS=26,DEGREE=27
}CHAR;

//OLED ADDRESS
byte OLED_COMMANDS[2] = {0x00,0x00};
byte OLED_ADDRESS = 0x78;
byte OLED_POSITION = 0;

//OLED COMMANDS-----------------------------------------------------------------
//Fundamental Command Table
byte OLED_SET_CONSTRAST_CMD = 0x81; //need to send data byte from 0 to 255 to set constrast
byte OLED_CHARGE_PUMP= 0x8D; //set charge pump on=0x14 or off=0x10
byte OLED_RESUME_RAM = 0xA4; //Resume to RAM content display 
//byte OLED_ENTIRE_DISPLAY_ON = 0xA5; //Entire display ON.Output ignores RAM content
byte OLED_SET_NORMAL_DISPLAY = 0xA6;
//byte OLED_SET_INVERSE_DISPLAY = 0xA7;
byte OLED_DISPLAY_OFF = 0xAE;
byte OLED_DISPLAY_ON = 0xAF;

//Addressing Setting Command Table
byte OLED_SET_MEMORY_ADDRESSING_MODE = 0x20;
byte OLED_SET_PAGE_START = 0xB0; //Select page from 0-7.Use: BO | PAGE
byte OLED_SET_LOWER_COLUMN = 0x00; // Range 0x00 - 0x0F
byte OLED_SET_HIGHER_COLUMN = 0x10; //Range 0x00 - 0x1F

//Timing & Driving Scheme Setting Command Table 
byte OLED_SET_DISPLAY_CLOCK_DIV = 0xD5;
byte OLED_SET_PRECHARGE_PERIOD = 0xD9;
byte OLED_SET_VCOM_DESELECT_LEVEL = 0xDB;

//Hardware Configuration (Panel resolution & layout related) Command Table
byte OLED_SET_DISPLAY_START_LINE = 0x7F; //Start line = 63 (range 0-63)
byte OLED_SET_MULTIPLEX_RATIO = 0xA8;
byte OLED_SET_DISPLAY_OFFSET = 0xD3;
byte OLED_SET_SEGMENT_REMAP = 0xA1; //column address 127 is mapped to SEG0
byte OLED_SET_COM_OUTPUT_SCAN_DIR = 0xC8; //normal mode scan from COM0 TO COM[N-1]]
byte OLED_SET_COM_PINS_HW_CONF = 0xDA;

//OLED functions
void OLED_SendCommand(byte data,DATA_TYPE type);
void OLED_Init(void);
void OLED_SetCursor(byte line,byte position);
void OLED_DisplayString(char *st);
void OLED_ClearDisplay(void);
void OLED_SetPageColumn(byte page,byte pos);
void OLED_WriteChar(CHAR ch);
void OLED_WriteNum(byte num);

//If we want specific position for our character then we set pos variable in range 0-119,else we give OLED_POSITION and we continue from the last position
//line variable is the page number,pos variable is the position start on the screen
void OLED_WriteString(CHAR *st,int st_size,byte line,byte pos);
void OLED_WriteNumber(byte *st,int st_size,byte line,byte pos);

//GREEK characters Array
byte chars[28][8] = {
                    {0x00, 0x7f, 0x09, 0x09, 0x09, 0x09, 0x7f, 0x00}, //A
                    {0x00, 0x7f, 0x49, 0x49, 0x49, 0x55, 0x63, 0x00}, //B
                    {0x00, 0x7f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00}, //GAMMA
                    {0x00, 0x78, 0x46, 0x41, 0x41, 0x46, 0x78, 0x00}, //DELTA
                    {0x00, 0x7f, 0x49, 0x49, 0x49, 0x49, 0x41, 0x00}, //E
                    {0x00, 0x61, 0x61, 0x51, 0x49, 0x47, 0x43, 0x00}, //Z
                    {0x00, 0x7f, 0x08, 0x08, 0x08, 0x08, 0x7f, 0x00}, //H
                    {0x00, 0x7f, 0x49, 0x49, 0x49, 0x49, 0x7f, 0x00}, //THETA
                    {0x00, 0x00, 0x00, 0x7f, 0x7f, 0x00, 0x00, 0x00}, //I
                    {0x00, 0x7f, 0x1c, 0x14, 0x22, 0x41, 0x41, 0x00}, //K
                    {0x00, 0x7e, 0x02, 0x01, 0x01, 0x02, 0x7e, 0x00}, //LAMDA
                    {0x00, 0x7f, 0x03, 0x04, 0x04, 0x03, 0x7f, 0x00}, //M
                    {0x00, 0x7f, 0x07, 0x04, 0x08, 0x70, 0x7f, 0x00}, //N
                    {0x00, 0x41, 0x49, 0x49, 0x49, 0x49, 0x41, 0x00}, //KSI
                    {0x00, 0x7f, 0x41, 0x41, 0x41, 0x41, 0x7f, 0x00}, //O
                    {0x00, 0x7f, 0x01, 0x01, 0x01, 0x01, 0x7f, 0x00}, //PI
                    {0x00, 0x7f, 0x09, 0x09, 0x09, 0x09, 0x0f, 0x00}, //P
                    {0x00, 0x63, 0x77, 0x5d, 0x49, 0x41, 0x41, 0x00}, //SIGMA
                    {0x00, 0x01, 0x01, 0x7f, 0x7f, 0x01, 0x01, 0x00}, //T
                    {0x00, 0x03, 0x04, 0x7f, 0x7f, 0x04, 0x03, 0x00}, //Y
                    {0x00, 0x0f, 0x09, 0x7f, 0x7f, 0x09, 0x0f, 0x00}, //FI
                    {0x00, 0x41, 0x63, 0x1c, 0x1c, 0x63, 0x41, 0x00}, //X
                    {0x00, 0x0f, 0x08, 0x7f, 0x7f, 0x08, 0x0f, 0x00}, //PSI
                    {0x00, 0x60, 0x7f, 0x01, 0x01, 0x7f, 0x60, 0x00}, //OMEGA
                    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //SPACE
                    {0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00}, //COLON
                    {0x00, 0x7f, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00}, //CELSIOUS SYMBOL C
                    {0x00, 0x00, 0x00, 0x00, 0x07, 0x05, 0x07, 0x00} //DEGREE SYMBOL FOR CELSIOUS
                   };

byte numbers[10][8] = {
                        {0x00, 0x7f, 0x41, 0x41, 0x41, 0x41, 0x7f, 0x00}, //0
                        {0x00, 0x42, 0x41, 0x7f, 0x7f, 0x40, 0x40, 0x00}, //1
                        {0x00, 0x79, 0x49, 0x49, 0x49, 0x49, 0x4f, 0x00}, //2
                        {0x00, 0x49, 0x49, 0x49, 0x49, 0x49, 0x7f, 0x00}, //3
                        {0x00, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x7f, 0x00}, //4
                        {0x00, 0x4f, 0x49, 0x49, 0x49, 0x49, 0x79, 0x00}, //5
                        {0x00, 0x7f, 0x49, 0x49, 0x49, 0x49, 0x79, 0x00}, //6
                        {0x00, 0x41, 0x21, 0x11, 0x09, 0x07, 0x03, 0x00}, //7
                        {0x00, 0x7f, 0x49, 0x49, 0x49, 0x49, 0x7f, 0x00}, //8
                        {0x00, 0x0f, 0x09, 0x09, 0x09, 0x09, 0x7f, 0x00}  //9
                      };

#endif